package com.skillbox.cryptobot.bot.command;

import com.skillbox.cryptobot.service.CryptoCurrencyService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.bots.AbsSender;

import java.io.IOException;
import java.math.BigDecimal;

@Slf4j
@Service
public class GetPriceCommand extends BotCommand {

    private final CryptoCurrencyService service;

    public GetPriceCommand(CryptoCurrencyService service) {
        super("get_price", "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC");
        this.service = service;
    }

    @Override
    public void execute(AbsSender absSender, User user, Chat chat, String[] arguments) {
        Long chatId = chat.getId();
        log.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã BTC –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", chatId);
        handlePriceRequest(absSender, chatId);
    }

    /**
     * –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Callback Query (–∫–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")
     */
    public void handlePriceRequest(AbsSender absSender, Long chatId) {
        log.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Callback Query: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", chatId);

        try {
            BigDecimal price = service.getBitcoinPrice();
            sendMessage(absSender, chatId, "üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: " + price + " USD.");
        } catch (IOException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã BTC: {}", e.getMessage(), e);
            sendMessage(absSender, chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Binance API.");
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private void sendMessage(AbsSender sender, Long chatId, String text) {
        if (sender == null) {
            log.error("–û—à–∏–±–∫–∞: AbsSender –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.");
            return;
        }
        try {
            sender.execute(new SendMessage(chatId.toString(), text));
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", chatId, e.getMessage(), e);
        }
    }
}